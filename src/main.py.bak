import sys
import pandas as pd
from load_data import load_data
from clean_data import clean_data
from evaluate import WaterQualityEvaluator

def main(location_filter=None):
    """
    Run the water quality monitoring pipeline.
    
    Args:
        location_filter (str, optional): Filter results by location name.
    """
    # Load data
    try:
        df = load_data("data/sensor_data.csv")
    except FileNotFoundError as e:
        print(f"Error: {e}")
        return
    except pd.errors.EmptyDataError as e:
        print(f"Error: CSV file is empty - {e}")
        return
    except Exception as e:
        print(f"Unexpected error: {e}")
        return
    
    # Clean data
    df_clean = clean_data(df)
    
    # Evaluate safety
    evaluator = WaterQualityEvaluator()
    for _, row in df_clean.iterrows():
        evaluator.add_reading(
            row['sensor_id'],
            row['location'],
            row['ph'],
            row['turbidity'],
            row['temperature']
        )
    
    results = evaluator.evaluate_all()
    
    # Filter by location if provided
    if location_filter:
        results = [(sid, loc, safe, reason) for sid, loc, safe, reason in results
                   if location_filter.lower() in loc.lower()]
    
    # Print results
    for sensor_id, location, is_safe, reason in results:
        status = "✅ Safe" if is_safe else f"❌ Unsafe ({reason})"
        print(f"Sensor {sensor_id} at {location}: {status}")
    
    # Count safe vs unsafe (bonus)
    safe_count, unsafe_count = evaluator.count_safety_status()
    print(f"\nSummary: {safe_count} safe, {unsafe_count} unsafe")
    
    # Save results to CSV (save)
    results_df = pd.DataFrame(
        results,
        columns=['sensor_id', 'location', 'is_safe', 'reason']
    )
    results_df.to_csv("data/results.csv", index=False)
    print("Results saved to data/results.csv")

if __name__ == "__main__":
    # Accept location name from terminal (bonus)
    location = sys.argv[1] if len(sys.argv) > 1 else None
    main(location)